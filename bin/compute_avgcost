#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import time
import momo
import momo.planning
import numpy as np

from optparse import OptionParser


# Process command line
parser = OptionParser( usage = "usage: %prog [options] dataset features [params...]" )
parser.add_option( 
  "--delta", help = "Grid resolution", type = "float", 
  dest = "delta", default = 0.25
)

options, args = parser.parse_args()

if len( args ) < 3:
  parser.error( "Incorrect number of arguments" )
  exit( 1 )

dataset        = args[0]
feature_name   = args[1]
agent_id       = int( args[2] )
algorithm_args = args[3:]


delta = options.delta
radius = float( algorithm_args[0] )

data      = momo.read_data( "data/filtered/%s.txt" % dataset )
features  = momo.features.__dict__[feature_name]

convert = momo.convert( data, delta )
frame_data = convert.preprocess_data( data )
compute_features = features.compute_features( convert, radius )
compute_costs = momo.features.compute_costs( convert )


weights = np.ones( features.FEATURE_LENGTH, dtype = np.float32 )
for i in xrange( features.FEATURE_LENGTH ):
  weights[i] /= features.FEATURE_LENGTH - i

nums   = frame_data[agent_id]["frame_nums"]
states = frame_data[agent_id]["states"]
frames = frame_data[agent_id]["frames"]


for i in xrange( len( states ) ):
  s = states[i]
  vel = np.linalg.norm( s[2:] )
  feat = compute_features( vel, frames[i] )
  costs = compute_costs( feat, weights )
  if i == 0:
    print weights, costs.shape
  s = np.sum( costs )
  c = costs.shape[0] * costs.shape[1] * costs.shape[2]
  print nums[i], s, s / c

