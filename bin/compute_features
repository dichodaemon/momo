#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import time
import momo
import momo.planning
import numpy as np

from optparse import OptionParser


# Process command line
parser = OptionParser( usage = "usage: %prog [options] dataset features [params...]" )
parser.add_option( 
  "--delta", help = "Grid resolution", type = "float", 
  dest = "delta", default = 0.25
)

options, args = parser.parse_args()

if len( args ) < 2:
  parser.error( "Incorrect number of arguments" )
  exit( 1 )

dataset        = args[0]
feature_name   = args[1]
algorithm_args = args[2:]


delta = options.delta
radius = float( algorithm_args[0] )

data      = momo.read_data( "data/filtered/%s.txt" % dataset )
features  = momo.features.__dict__[feature_name]

weights = np.ones( features.FEATURE_LENGTH, dtype = np.float32 )
for i in xrange( features.FEATURE_LENGTH ):
  weights[i] /= ( i + 1 )

for frame in momo.frames( data ):
  tmp = []
  for agent in frame:
    tmp.append( agent )
  for i in xrange( len( tmp ) ):
     o_frame, o_time, o_id, o_x, o_y, o_dx, o_dy = tmp[i]
     others = [np.array( v[3:] ) for v in tmp]
     del others[i]

     reference = np.array( [o_x, o_y, o_dx, o_dy] )
     feature = features.compute_feature( reference, others, radius )
     print o_frame, o_id, np.dot( weights, feature ), " ".join( [str( v ) for v in feature] )


