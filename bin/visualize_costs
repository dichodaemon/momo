#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import time
import pylab as pl
import numpy as np
import momo

def plot_cost( pos, angle, cost, convert, vmin, vmax ):
  pl.subplot( 3, 3, pos )
  pl.axis( "scaled" )
  pl.xlim( convert.x, convert.x2 )
  pl.ylim( convert.y, convert.y2 )
  pl.imshow( 
    costs[angle], pl.cm.jet, None, None, "none", 
    origin = "upper", extent = (convert.x, convert.x2, convert.y, convert.y2), 
    vmin = vmin, vmax = vmax 
  )

data     = momo.read_data( "data/filtered/%s.txt" % sys.argv[1] )

start_path = "data/models/%s/%s" % ( sys.argv[2], sys.argv[3] )
output_name = "%s/%s.txt" % ( start_path, sys.argv[1] )

cost_function = momo.cost_functions.__dict__[sys.argv[3]]
cost_function = cost_function.load( open( output_name ) )

#theta = np.random.rand( 18 ).astype( np.float32 )
#theta /= np.linalg.norm( theta )

theta = cost_function.theta

#Used to estimate the max and min grid values
ts = sorted( theta )
vmin = sum( ts[:2] )
vmax = sum( ts[-2:] )

delta  = 0.15
convert = momo.convert( data, delta )

compute_costs = momo.irl.features.flow.compute_costs( convert, radius = 3 )
plan = momo.planning.dijkstra()

pl.figure( 1, figsize = ( 30, 10 ), dpi = 75 )
pl.ion()

start = np.array( [convert.x, convert.y, 0], dtype = np.float32 )
goal  = np.array( [convert.x2, convert.y2, 0], dtype = np.float32 )

for f in momo.frames( data ):
  f = np.array( f, dtype = np.float32 )[:,3:]
  t = time.time()

  costs = compute_costs( 0.04, theta, f )
  cummulated, parents = plan( costs, convert.from_world( goal ) )

  t = time.time() - t
  print "Compute FPS", 1 / t

  t = time.time()
  pl.clf()
  plot_cost( 1, 3, costs, convert, vmin, vmax )
  plot_cost( 2, 2, costs, convert, vmin, vmax )
  plot_cost( 3, 1, costs, convert, vmin, vmax )
  plot_cost( 4, 4, costs, convert, vmin, vmax )
  plot_cost( 6, 0, costs, convert, vmin, vmax )
  plot_cost( 7, 5, costs, convert, vmin, vmax )
  plot_cost( 8, 6, costs, convert, vmin, vmax )
  plot_cost( 9, 7, costs, convert, vmin, vmax )

  pl.subplot( 3, 3, 5 )
  pl.axis( "scaled" )
  pl.xlim( convert.x, convert.x2 )
  pl.ylim( convert.y, convert.y2 )
  pl.imshow( cummulated[0], pl.cm.jet, None, None, "none", 
    origin = "upper", extent = (convert.x, convert.x2, convert.y, convert.y2), 
    vmin = 0, vmax = 80 
  )

  points = plan.get_path( parents, convert.from_world( start ) )
  pl.plot( 
    [ convert.to_world( v )[0] for v in points[:]],
    [ convert.to_world( v )[1] for v in points[:]],
  "m." )

  pl.draw()
  t = time.time() - t
  print vmin, vmax
  print "Draw FPS", 1 / t


