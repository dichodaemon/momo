#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import time
import momo
import momo.planning
import numpy as np
import matplotlib.pylab as pl
import scipy.ndimage as ni

def split_line( line ):
  v = line.split()
  return [
    int( v[0] ), float( v[1] ), int( v[2] ), 
    float( v[3] ), float( v[4] ), float( v[5] ), float( v[6] )
  ]

def read_data( filename ):
  f = open( filename )
  data = [split_line( l ) for l in f]
  f.close()
  return data

class Experiment( object ):
  def __init__( self, grid_x, grid_y, delta, width, height, data ):
    self.grid_x = grid_x
    self.grid_y = grid_y
    self.delta  = delta
    self.width  = width
    self.height = height
    self.cases  = []
    self.data = data

  def add_case( self, cost_function, format_string, legend ):
    self.cases.append( {
      "cost_function": cost_function, 
      "format_string": format_string,
      "legend": legend
    } )

  def animate( self, quiver = [] ):
    x = {}
    y = {}
    x1 = []
    y1 = []
    for f in momo.frames( self.data ):
      pl.clf()
      pl.axis( "scaled" )
      pl.xlim( self.grid_x, self.grid_x + self.width )
      pl.ylim( self.grid_y - self.height, self.grid_y )
      tm = time.time()
      for o in f:
        o_id = o[2]
        o_x  = o[3]
        o_y  = o[4]
        if not o_id in x:
          x[o_id] = []
          y[o_id] = []
        x[o_id].append( o_x )
        y[o_id].append( o_y )
      for o_id in x.keys():
        pl.plot( x[o_id], y[o_id], 'r' )
      pl.plot( x1, y1, "ko" )
      #pl.legend()
      pl.draw()

      #for agent_id in x.keys():
        #if len( x[agent_id] ) == len( self.agents[agent_id] ):
          #del x[agent_id]
          #del y[agent_id]

data = read_data( "data/tracker/freiburg-station_filtered.txt" )

# Experiment 1

exp1 = Experiment( -5, 30., 0.25, 35, 45, data )

#exp1.add_case( 
  #momo.cost_functions.weighted_mahalanobis( 
    #momo.features.bins, data, None
  #),
  #"g.",
  #"bins/maha"
#)

#exp1.add_case( 
  #momo.cost_functions.adaptive_gaussian_mixture( momo.features.real, data, kmax = 25),
  #"k.",
  #"real/ggmm"
#)


pl.figure( 1, figsize = ( 20, 10 ), dpi = 75 )
pl.ion()
exp1.animate( ["real/ggmm"] )
#for i in xrange( len( snapshot ) - 1 ):
  #min_dist = 1E6
  #min_j = -1
  #for j in xrange( 1, len( snapshot ) ):
    #diff = self.agents[snapshot[i][0]][snapshot[i][1]  - self.agents[snapshot[j][0]][snapshot[j][1]
    #dist = np.dot( diff, diff )
    #if dist < min_dist:
      #min_dist = dist
      #min_j    = j
  #self.pairs.append( [snapshot[i], snapshot[j]] )

