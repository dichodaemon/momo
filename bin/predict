#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import time
import momo
import momo.planning
import numpy as np
import matplotlib.pylab as pl
import scipy.ndimage as ni


class Experiment( object ):
  def __init__( self, grid_x, grid_y, delta, width, height, data, track, destination ):
    self.grid_x = grid_x
    self.grid_y = grid_y
    self.delta  = delta
    self.width  = width
    self.height = height
    self.cases  = []
    self.data   = data
    self.track  = track
    self.destination = destination

  def add_case( self, cost_function, format_string, legend ):
    self.cases.append( {
      "cost_function": cost_function, 
      "format_string": format_string,
      "legend": legend
    } )

  def animate( self, quiver = [] ):
    x = {}
    y = {}
    x1 = []
    y1 = []
    count = 0
    for f in momo.frames( self.data ):
      count += 1
      if count % 10 != 0:
        continue
      pl.clf()
      pl.axis( "scaled" )
      pl.xlim( self.grid_x, self.grid_x + self.width )
      pl.ylim( self.grid_y - self.height, self.grid_y )
      tm = time.time()
      for o in f:
        o_id = o[2]
        o_x  = o[3]
        o_y  = o[4]
        if not o_id in x:
          x[o_id] = []
          y[o_id] = []
        x[o_id].append( o_x )
        y[o_id].append( o_y )
      for o_id in x.keys():
        if o_id == self.track:
          pl.plot( x[o_id], y[o_id], 'r' )
        else:
          pl.plot( x[o_id], y[o_id], 'b' )
      pl.plot( x1, y1, "ko" )
      #pl.legend()
      pl.draw()

      #for agent_id in x.keys():
        #if len( x[agent_id] ) == len( self.agents[agent_id] ):
          #del x[agent_id]
          #del y[agent_id]

cost_function = momo.cost_functions.__dict__[sys.argv[1]]
model = sys.argv[2]
data  = momo.read_data( sys.argv[3] )

if len( sys.argv ) > 4:
  track = int( sys.argv[4] )
else:
  max_count = 0
  track = -1
  counts = {}
  for o in data:
    if not o[2] in counts:
      counts[o[2]] = 0
    counts[o[2]] += 1
    if counts[o[2]] > max_count:
      track = o[2]
      max_count = counts[o[2]]


first = -1
last  = -1
destination = None
for o in data:
  if o[2] == track:
    if first == -1:
      first = o[0]
    last = o[0]
    destination = o


samples = []
for o in data:
  if o[0] >= first and o[0] <= last:
    samples.append( o )

# Experiment 1


exp1 = Experiment( -5, 30., 0.25, 35, 45, samples, track, destination )

exp1.add_case( 
  cost_function.load( open( model ) ),
  "g.",
  "bins/maha"
)

pl.figure( 1, figsize = ( 20, 10 ), dpi = 75 )
pl.ion()
exp1.animate( ["real/ggmm"] )
