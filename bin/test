#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
import os

BASE_DIR = os.path.abspath( os.path.join( os.path.dirname( __file__ ), ".." ) )
path     = os.path.abspath( os.path.join( BASE_DIR, "python" ) )
sys.path.append( path )

import time
import pylab as pl
import numpy as np
import momo
from optparse import OptionParser

def list_callback( option, opt_str, value, parser ):
  setattr( parser.values, option.dest, [int( v ) for v in value.split( "," )] )

def plot_paths( convert, observed, planned ):
  pl.figure( 1, figsize = ( 30, 10 ), dpi = 75 )
  pl.clf()
  pl.axis( "scaled" )
  pl.xlim( convert.x, convert.x2 )
  pl.ylim( convert.y, convert.y2 )
  pl.plot( 
    [ v[0] for v in observed[:]],
    [ v[1] for v in observed[:]],
    "r."
  )

  pl.plot( 
    [ v[0] for v in planned[:]],
    [ v[1] for v in planned[:]],
    "b."
  )
  pl.show()

# Process command line
parser = OptionParser( usage = "usage: %prog [options] dataset algorithm velocity [params...]" )
parser.add_option( 
  "--ids", help = "Trajectory ids to learn from", type = "string", 
  action = "callback", dest = "ids", callback = list_callback, default = []
)
parser.add_option( 
  "--delta", help = "Grid resolution", type = "float", 
  dest = "delta", default = 0.25
)
parser.add_option( 
  "--velocity", help = "Simulated object velocity", type = "float", 
  dest = "velocity", default = 0.02
)

options, args = parser.parse_args()

if len( args ) < 2:
  parser.error( "Incorrect number of arguments" )
  exit( 1 )

dataset        = args[0]
algorithm_name = args[1]
algorithm_args = args[2:]

delta = options.delta
ids  = options.ids
velocity = options.velocity

# Prepare file paths
start_path = "data/models/%s" % dataset 

input_name = "%s/%s" % ( start_path, algorithm_name )
if len( algorithm_args ) > 0:
  input_name += "-%s" % "_".join( algorithm_args )
input_name += ".txt"

# Perform tests

data      = momo.read_data( "data/filtered/%s.txt" % dataset )
algorithm = momo.cost_functions.__dict__[algorithm_name]

algorithm = algorithm.load( open( input_name ) )

convert    = momo.convert( data, delta )
frame_data = convert.preprocess_data( data )

algorithm.convert = convert

if len( ids ) == 0:
  self.ids = ids
  l = len( frame_data.keys() ) / 2
  ids = range( l, l + 5 )


# Tests against demonstrated behavior
mu_observed = {}
mu_planned  = {}
all_observed = {}
all_planned = {}

for o_id in ids:
  states = frame_data[o_id]["states"]
  frames = frame_data[o_id]["frames"]

  # Compute observed feature_sum
  val = algorithm.feature_sum( states, frames )
  mu_observed[o_id] = val / sum( val[:4] )


  # Compute planned feature_sum
  planned = algorithm.plan( states[0], states[-1], velocity, frames, replan = 1 )
  val = algorithm.feature_sum( planned, frames )
  mu_planned[o_id] = val / sum( val[:4] )

  all_observed[o_id] = states
  all_planned[o_id] = planned

# Random tests

for i in xrange( num_random ):
  start = convert.random_world()
  goal  = convert.random_world()
  planned = algorithm.plan( start, goal, velocity, frames[start_frame], replan = 1 )

observed = np.sum( mu_observed.values(), 0 ) / len( mu_observed.values() )
planned  = np.sum( mu_planned.values(), 0 ) / len( mu_planned.values() )
print "Feature difference:", np.linalg.norm( observed - planned )

for o_id in ids:
  plot_paths( convert, all_observed[o_id], all_planned[o_id] )

  


